// Generated by CoffeeScript 1.6.3
var Player, sync;

sync = {
  'GDrive': {
    'key': '361504558285.apps.googleusercontent.com',
    "scope": "https://www.googleapis.com/auth/drive",
    "app_name": "tetris"
  }
};

delete localStorage['Player'];

Nimbus.Auth.setup(sync);

window.realtime_update_callback = function() {
  var avatar, board, boards, canvas, join, one, online, over, player, restart, _i, _j, _k, _l, _len, _len1, _len2, _len3;
  console.log('updated...');
  online = Player.findAllByAttribute('online', true);
  restart = Player.findAllByAttribute('restart', 1);
  over = Player.findAllByAttribute('over', 1);
  boards = controllers.boards;
  for (_i = 0, _len = boards.length; _i < _len; _i++) {
    board = boards[_i];
    if (board && board.playerRef) {
      board.snapshot = board.playerRef;
      board.draw();
    }
  }
  if (restart.length) {
    for (_j = 0, _len1 = restart.length; _j < _len1; _j++) {
      one = restart[_j];
      one.restart = 0;
      one.save();
    }
    controllers.myBoard.clear();
    controllers.resetGravity();
  }
  if (over.length) {
    for (_k = 0, _len2 = over.length; _k < _len2; _k++) {
      one = over[_k];
      one.over = 0;
      one.save();
    }
    for (_l = 0, _len3 = players.length; _l < _len3; _l++) {
      player = players[_l];
      if (player.over !== 1) {
        log('player ' + player.name + ' win');
        controllers.pause();
        return;
      }
    }
  }
  if (controllers.playercount !== online.length && controllers.playercount < 2) {
    join = Player.findByAttribute('state', 1);
    if (join) {
      canvas = $('#canvas' + controllers.playercount).get(0);
      boards.push(new Tetris.Board(canvas, join));
      if (join.avatar.indexOf('http') === -1) {
        avatar = 'https:' + join.avatar;
      } else {
        avatar = join.avatar;
      }
      $('#avatar' + controllers.playercount).attr('src', avatar);
      $('.player_name' + controllers.playercount).text(join.name);
      return controllers.playercount++;
    }
  }
};

Player = Nimbus.Model.setup('Player', ['userid', 'name', 'online', 'board', 'piece', 'avatar', 'restart', 'state', 'over']);

Player.prototype.child = function(key) {
  var i, keys, result;
  key = key.toString();
  result = this;
  keys = key.split('/');
  i = 0;
  while (i < keys.length) {
    result = result[keys[i]];
    i++;
  }
  return result;
};

Nimbus.Auth.set_app_ready(function() {
  var collabrators, data, me, one, player, _i, _j, _k, _len, _len1, _len2, _ref;
  if (Nimbus.Auth.authorized()) {
    $('#login').text('Logout');
    $('.mask').hide();
    Player.sync_all();
    collabrators = doc.getCollaborators();
    for (_i = 0, _len = collabrators.length; _i < _len; _i++) {
      one = collabrators[_i];
      if (one.isMe) {
        localStorage['current'] = JSON.stringify(one);
        fill_player(one);
        me = one;
      }
    }
    data = Player.findByAttribute('userid', me.userId);
    _ref = Player.all();
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      player = _ref[_j];
      player.online = false;
      player.state = 0;
      for (_k = 0, _len2 = collabrators.length; _k < _len2; _k++) {
        one = collabrators[_k];
        if (one.userId === player.userid) {
          console.log('player ' + player.name + ' online');
          player.online = true;
        }
        player.over = 0;
        player.restart = 0;
      }
      player.save();
    }
    return window.controllers = new Tetris.Controller(Player.all());
  }
});

window.set_player = function(data, target) {
  var player;
  player = Player.findByAttribute('userid', data.userId);
  if (!player) {
    player = Player.create();
    player.userid = data.userId;
    player.name = data.displayName;
    player.avatar = data.photoUrl;
  }
  player.online = true;
  player.state = 1;
  player.restart = 0;
  player.over = 0;
  player.avatar = data.photoUrl;
  return player.save();
};

window.fill_player = function(user) {
  var offline, player, players;
  players = Player.all();
  if (players.length < 2) {
    set_player(user);
    return;
  } else if (player.length === 2) {
    player = Player.findByAttribute('userid', userId);
    if (player) {
      player.online = true;
      player.avatar = user.photoUrl;
      player.state = 1;
      player.restart = 0;
      player.over = 0;
      player.save();
      return;
    } else {
      offline = Player.findByAttribute('offline', false);
      if (offline) {
        offline.destroy();
        set_player(user);
        return;
      }
    }
  }
  return console.log('waiting...');
};

$(function() {
  $('a#login').click(function() {
    console.log('auth start...');
    Nimbus.Auth.authorize('GDrive');
    return false;
  });
  $('a#logout').click(function() {
    controllers.pause();
    Nimbus.Auth.logout();
    location.reload();
    return false;
  });
  $('#restart').click(function() {
    var id, player;
    id = controllers.myPlayerRef.userid;
    player = Player.findByAttribute('userid', id);
    player.restart = 1;
    player.save();
    return false;
  });
  $('#invite').click(function() {
    var email;
    email = $('#invite_email').val();
    Nimbus.Share.add_share_user_real(email, function(user) {
      return console.log('file shared');
    });
    return false;
  });
  return true;
});
